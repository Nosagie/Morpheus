// Define variables (it's a node thing)
var bid = [0.00295,0.00295001,0.0029646,0.0029508,0.00294001,0.00295591,0.00295701,0.00294861,0.00295004,0.00295301,0.00294707,0.002949,0.00297316,0.00295512,0.00293695,0.00291,0.00286804,0.002849,0.0028014,0.00279002,0.00285016,0.0028601,0.00285111,0.00286557,0.00286001,0.00290256,0.00290268,0.00290256,0.00289244,0.00284001,0.00285541,0.00285991,0.0028423,0.00287973,0.00287,0.00287366,0.00287404,0.00286801,0.002853,0.00281184,0.00283862,0.00282103,0.0028323,0.00285165,0.00285175,0.00287298,0.00286515,0.00287391,0.00284945,0.00287616,0.0029049,0.00291,0.00291996,0.0029,0.00290002,0.00288502,0.00288602,0.00288601,0.0028712,0.00286624,0.00285539,0.002852,0.00287297,0.00286222,0.00286995,0.00286,0.002862,0.002862,0.00287994,0.002882,0.00288202,0.00288999,0.002879,0.002885,0.00289013,0.00289338,0.0028686,0.00286993,0.00286003,0.0028722,0.00287217,0.00287219,0.00285244,0.00287589,0.00288,0.00285201,0.00285182,0.00284998,0.0028444,0.00283001,0.0028519,0.00283196,0.00283417,0.00284986,0.00285,0.00285202,0.00288248,0.00286105,0.00287391,0.00290066,0.00288387,0.00291,0.00290002,0.00288884,0.00287302,0.0028525,0.00284976,0.00280114,0.00280007,0.00282266,0.00280147,0.00280002,0.00275129,0.00272107,0.00274662,0.00278112,0.00278008,0.0028158,0.00276831,0.00275021,0.00275009,0.002735,0.0027,0.00268704,0.00268344,0.00271033,0.002739,0.00272107,0.00267612,0.00264728,0.00265035,0.00268134,0.00267998,0.0027,0.00268002,0.0026778,0.00270005,0.00271,0.0027203,0.00276,0.00272618,0.00272715,0.00275,0.00277498,0.00278108,0.00281499,0.00279999,0.0028,0.00278969,0.00278097,0.00279002,0.00278095,0.00280698,0.0028,0.00280019,0.00282994,0.00282984,0.0028386,0.002836,0.00283504,0.00282509,0.00280904,0.00281602,0.00280912,0.00280904,0.002801,0.00279981,0.0028004,0.00283,0.00281,0.00281002,0.00280799,0.00280201,0.0028031,0.0027811,0.0027638,0.00275013,0.002721,0.00270598,0.00271552];
var ask = [0.00295999,0.0029647,0.00296466,0.00296468,0.00296462,0.00296973,0.002982,0.00297467,0.00296847,0.0029714,0.00294999,0.00295,0.00299486,0.002987,0.00295998,0.00293531,0.0028685,0.0028525,0.00283227,0.00281821,0.00286799,0.00286805,0.00286698,0.00287496,0.00286997,0.00290499,0.00291287,0.002922,0.00289888,0.00284982,0.00286399,0.00286199,0.00287971,0.00289098,0.00287355,0.00287367,0.00289,0.0028919,0.00286309,0.00281797,0.002842,0.00285157,0.002861,0.00286599,0.00286984,0.00287299,0.00287,0.00288001,0.00290489,0.00290472,0.002915,0.00291064,0.00292,0.00290539,0.00292198,0.0029107,0.00289,0.00289,0.0028859,0.0028895,0.00288884,0.00287999,0.00287298,0.00287898,0.00286996,0.00286799,0.002869,0.002869,0.00288786,0.00288992,0.00288992,0.00289,0.00287998,0.00289,0.0029,0.00290499,0.00289,0.00288448,0.0028851,0.00287995,0.00287219,0.00287597,0.00287595,0.00287599,0.00288869,0.00287888,0.00286995,0.00285,0.002845,0.00284,0.00286189,0.0028598,0.00286874,0.00285948,0.00286686,0.0028823,0.00288831,0.00288804,0.00289897,0.00290283,0.00290495,0.0029184,0.00290012,0.00293199,0.002874,0.00285251,0.00285,0.00283416,0.00282989,0.00282275,0.00281999,0.00281336,0.00277,0.00272182,0.00275899,0.00279262,0.00281492,0.002828,0.0028,0.00276,0.00276496,0.00274554,0.00270749,0.00268705,0.00269019,0.002741,0.002743,0.00273359,0.0026799,0.00267197,0.002659,0.00270021,0.00269597,0.00271536,0.00269898,0.00269399,0.00272987,0.00273118,0.00273998,0.00276563,0.00275989,0.002764,0.00275893,0.002778,0.00279999,0.00281999,0.0028128,0.00281264,0.0028,0.00278998,0.00279798,0.00281267,0.0028126,0.00280897,0.00282699,0.00283877,0.00283,0.00284995,0.00285,0.00284495,0.0028251,0.00281583,0.00283059,0.00281415,0.002814,0.002811,0.00279998,0.00281397,0.00283891,0.0028218,0.00282,0.00281991,0.00281699,0.00281099,0.00279992,0.002765,0.00275286,0.00272715,0.00272,0.00272];
var price = [0.00295999,0.0029647,0.00296466,0.00296469,0.00296463,0.002962,0.00298228,0.00294859,0.00296652,0.00297137,0.00294707,0.00295,0.00299491,0.002987,0.00293695,0.00291408,0.0028685,0.0028525,0.00280011,0.00278702,0.00285008,0.00286805,0.00285111,0.00287496,0.00286997,0.00290256,0.00291286,0.002922,0.00289888,0.00284982,0.002864,0.00286199,0.00287971,0.00287973,0.00287,0.00287366,0.00287404,0.0028919,0.00286309,0.00281797,0.00283862,0.00285,0.00283221,0.00286599,0.00286984,0.00287298,0.00287,0.00288001,0.00290489,0.00290472,0.0029049,0.00291,0.00291996,0.0029054,0.00292283,0.002876,0.00289,0.00289,0.00288998,0.0028895,0.00288884,0.00288077,0.00287297,0.00287995,0.00286996,0.00286994,0.002869,0.002869,0.00287993,0.00288992,0.00288202,0.00289,0.00287998,0.00289,0.0029,0.00289338,0.00289,0.00288448,0.00288519,0.00287995,0.00287219,0.00287219,0.00287594,0.00287587,0.00288,0.00287889,0.00285192,0.00285,0.002845,0.00284,0.00286189,0.0028598,0.00286883,0.00285949,0.0028669,0.0028823,0.00288248,0.00286,0.0028986,0.00290066,0.00290494,0.00291,0.00290002,0.00288884,0.002874,0.00285251,0.00284976,0.00280116,0.00282988,0.00282275,0.00281999,0.00280002,0.00277,0.00272182,0.00274017,0.00278112,0.002815,0.0028158,0.0028,0.00276,0.00276498,0.002735,0.0027,0.00268704,0.00269019,0.00271029,0.002739,0.00272107,0.00265501,0.00267198,0.002659,0.00268134,0.00269597,0.0027,0.00269898,0.0026778,0.002728,0.00270007,0.0027203,0.00276564,0.00275989,0.00276435,0.00275893,0.00277498,0.00279998,0.00282,0.00279999,0.0028,0.00278969,0.00278097,0.00279798,0.00278088,0.00281263,0.0028,0.00280019,0.00283877,0.00283,0.00284995,0.002836,0.00283504,0.002825,0.00281583,0.00281602,0.00280907,0.00280904,0.002811,0.00279741,0.00281099,0.00283,0.00281001,0.00281002,0.00280799,0.00280201,0.0028031,0.00279997,0.0027638,0.00275011,0.00272715,0.00272,0.00272];
var market = bid.length
var period
var periodBack
var changeScore = []
var cumulative
var cumScore = []
var prev 
var backShort = []
var backLong = []
var delay
var delays
var delayedLine
var fwdShort
var fwdLong
var action
var parameter1
var parameter2
var parameter3
var length
var minimumArray = [];
var maximumArray = [];
var rand
var result

// The Complex Line function that calculates (x+y)/2 based on duration and location
function complexLine (position, duration) {
	length = position - duration; // how long you go back for
	minimumArray =[] // array of bids
	maximumArray = [] // array of asks
	for (i = position; i > length; i--) { 
		minimumArray.push(bid[i]); // fill up array with bids
		maximumArray.push(ask[i]); // fill up array with asks
	}
	min = Math.min(...minimumArray); // find the minimum bid in the period
	max = Math.max(...maximumArray); // find the maximum ask in the period
	return result = (min+max)/2;
}

function calculate () {
    for (period = 0; period < market; period++) { // loop through size of market
    	/* TREND CALCULATOR
    	calculate change scores to check trend of prices.
    	-x == negative trend
    	+x == positive trend
    	*/
        prev = period - 1 // previous positions
        prev2 = period - 2 
        change = price[period] - price[prev]
        if (change <= 0) {
            changeScore[period] = -1
        } else if (change > 0) {
            changeScore[period] = 1
        }
        // each period from 3 has a cumulative score. Cumulative score is sum of change score for current position and previous 2 positions
        cumScore[period] = changeScore[period] + changeScore[prev] + changeScore[prev2] // YES, CUMSCORE IS TONGUE-IN-CHEEK!
        // Two delays (because, MAGICK!)
        delay = period - 25
        delays = period - 28
        // define derived variables
        backShort[period] = complexLine(period, 9) // the reverse short line
        backLong[period] = complexLine(period, 26) // the reverse long line
        delayedLine = price[delay] // the delayed line (price 26 places back)
        fwdShort = (backShort[delays] + backLong[delays]) / 2 // MAGICK!!!!
        fwdLong = complexLine(delays, 52) // always so hard to figure out how to explain this one so let's just say "MAGICK!!!"
        // actual math
        if (price[period] > fwdShort && price[period] > fwdLong) {parameter1 = true;} else {parameter1 = false;} // if you don't define "FALSE", you enter one chance. Trust me, I tried it!
        if (fwdShort > fwdLong) {parameter2 = true;} else {parameter2 = false;}
        if (cumScore[period] > 0) {parameter3 = true;} else {parameter3 = false;}
        if (parameter1 == true && parameter2 == true && parameter3 == true) {
            action = "GO"
            console.log("Period: " + period);
            console.log("Action: " + action)
            console.log("Price: " + price[period])
            console.log("----")
        } else {
            action = "STOP"
        }
    }
};
calculate ();