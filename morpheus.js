// You know, when you get old, in life, things get taken from you. I mean, that's... that's... that's a part of life. But, you only learn that when you start losin' stuff. You find out life's this game of inches, so is football. Because in either game - life or football - the margin for error is so small. I mean, one half a step too late or too early and you don't quite make it. One half second too slow, too fast and you don't quite catch it.
// The inches we need are everywhere around us. They're in every break of the game, every minute, every second. On this team we fight for that inch. On this team we tear ourselves and everyone else around us to pieces for that inch. We claw with our fingernails for that inch.
// Because we know when add up all those inches, that's gonna make the fucking difference between winning and losing! Between living and dying!

// Define variables (it's a node thing)
var bid = [0.0000044, 0.00000439, 0.0000044, 0.0000044, 0.0000044, 0.00000441, 0.00000441, 0.00000441, 0.00000441, 0.00000441, 0.0000044, 0.00000442, 0.0000044, 0.0000044, 0.00000439, 0.00000442, 0.00000441, 0.00000441, 0.00000443, 0.00000443, 0.00000444, 0.00000443, 0.00000442, 0.00000444, 0.00000444, 0.00000442, 0.00000443, 0.00000443, 0.00000443, 0.00000444, 0.00000444, 0.00000445, 0.00000446, 0.00000445, 0.00000445, 0.00000445, 0.00000446, 0.00000444, 0.00000442, 0.00000441, 0.00000441, 0.00000439, 0.00000437, 0.00000435, 0.00000439, 0.00000438, 0.0000044, 0.00000444, 0.00000442, 0.00000439, 0.00000439, 0.00000441, 0.0000044, 0.00000441, 0.00000441, 0.00000442, 0.00000441, 0.00000441, 0.00000442, 0.00000438, 0.00000439, 0.00000434, 0.00000434, 0.00000434, 0.00000438, 0.00000434, 0.00000434, 0.00000437, 0.0000043, 0.00000435, 0.00000432, 0.00000431, 0.00000438, 0.00000433, 0.00000434, 0.00000431, 0.00000438, 0.00000444, 0.00000451, 0.00000451, 0.00000448, 0.00000455, 0.00000461, 0.00000455, 0.00000463, 0.00000461, 0.0000046, 0.00000459, 0.00000454, 0.00000458, 0.00000456, 0.00000453, 0.00000452, 0.00000451, 0.00000445, 0.00000451, 0.00000447, 0.00000445, 0.0000045, 0.00000452, 0.00000449, 0.00000453, 0.00000452, 0.0000045, 0.00000452, 0.0000045, 0.00000452, 0.00000455, 0.00000458, 0.0000046, 0.00000458, 0.0000046, 0.00000461, 0.00000461, 0.00000465, 0.00000465, 0.00000473, 0.00000461, 0.00000468, 0.00000468, 0.00000473, 0.00000471, 0.00000471, 0.00000468, 0.00000467, 0.00000464, 0.00000466, 0.00000461, 0.00000456, 0.00000459, 0.00000465, 0.00000464, 0.00000464, 0.00000463, 0.00000464, 0.00000462, 0.00000461, 0.00000461, 0.00000461, 0.00000462, 0.00000459, 0.00000458, 0.00000456, 0.00000456, 0.00000456, 0.00000459, 0.00000456, 0.00000455, 0.00000451, 0.00000454, 0.00000455, 0.00000455, 0.00000455, 0.00000458, 0.0000046, 0.0000046, 0.0000046, 0.00000461, 0.00000459, 0.00000456, 0.00000458, 0.00000458, 0.00000446, 0.00000447, 0.00000439, 0.00000446, 0.00000447, 0.00000451, 0.00000447, 0.00000443, 0.00000443, 0.00000443, 0.00000444, 0.00000445, 0.00000447, 0.00000446, 0.00000451, 0.00000453, 0.00000451, 0.00000451, 0.00000451, 0.00000449, 0.00000454, 0.00000449, 0.00000452, 0.0000045, 0.0000045];
var ask = [0.00000441, 0.0000044, 0.00000441, 0.00000441, 0.00000441, 0.00000442, 0.00000443, 0.00000443, 0.00000442, 0.00000442, 0.00000441, 0.00000443, 0.00000441, 0.00000441, 0.0000044, 0.00000443, 0.00000443, 0.00000442, 0.00000444, 0.00000444, 0.00000445, 0.00000444, 0.00000443, 0.00000445, 0.00000445, 0.00000443, 0.00000444, 0.00000444, 0.00000444, 0.00000445, 0.00000445, 0.00000446, 0.00000447, 0.00000446, 0.00000446, 0.00000446, 0.00000447, 0.00000445, 0.00000443, 0.00000443, 0.00000442, 0.00000441, 0.00000438, 0.00000436, 0.00000441, 0.00000439, 0.00000441, 0.00000445, 0.00000443, 0.0000044, 0.0000044, 0.00000442, 0.00000441, 0.00000442, 0.00000442, 0.00000443, 0.00000442, 0.00000442, 0.00000443, 0.00000439, 0.0000044, 0.00000435, 0.00000435, 0.00000435, 0.00000439, 0.00000435, 0.00000435, 0.00000438, 0.00000433, 0.00000436, 0.00000433, 0.00000432, 0.00000439, 0.00000434, 0.00000435, 0.00000433, 0.00000439, 0.00000445, 0.00000452, 0.00000452, 0.00000449, 0.00000456, 0.00000462, 0.00000456, 0.00000464, 0.00000462, 0.00000461, 0.0000046, 0.00000455, 0.00000459, 0.00000457, 0.00000454, 0.00000453, 0.00000452, 0.00000446, 0.00000453, 0.00000448, 0.00000446, 0.00000451, 0.00000453, 0.0000045, 0.00000454, 0.00000453, 0.00000451, 0.00000453, 0.00000451, 0.00000453, 0.00000456, 0.00000459, 0.00000461, 0.00000459, 0.00000461, 0.00000462, 0.00000462, 0.00000466, 0.00000466, 0.00000474, 0.00000462, 0.00000469, 0.00000469, 0.00000474, 0.00000472, 0.00000472, 0.00000469, 0.00000468, 0.00000465, 0.00000467, 0.00000462, 0.00000458, 0.0000046, 0.00000466, 0.00000465, 0.00000465, 0.00000465, 0.00000465, 0.00000463, 0.00000462, 0.00000462, 0.00000462, 0.00000463, 0.0000046, 0.00000459, 0.00000457, 0.00000457, 0.00000457, 0.0000046, 0.00000457, 0.00000456, 0.00000452, 0.00000455, 0.00000456, 0.00000456, 0.00000456, 0.0000046, 0.00000461, 0.00000461, 0.00000461, 0.00000462, 0.0000046, 0.00000457, 0.00000459, 0.00000459, 0.00000447, 0.00000449, 0.0000044, 0.00000447, 0.00000448, 0.00000452, 0.00000448, 0.00000444, 0.00000444, 0.00000444, 0.00000445, 0.00000447, 0.00000448, 0.00000448, 0.00000452, 0.00000454, 0.00000452, 0.00000452, 0.00000452, 0.0000045, 0.00000455, 0.0000045, 0.00000454, 0.00000451, 0.00000451];
var price = [0.00000441, 0.0000044, 0.00000441, 0.0000044, 0.0000044, 0.00000441, 0.00000443, 0.00000441, 0.00000442, 0.00000441, 0.00000441, 0.00000443, 0.0000044, 0.0000044, 0.0000044, 0.00000442, 0.00000443, 0.00000442, 0.00000443, 0.00000444, 0.00000445, 0.00000444, 0.00000442, 0.00000444, 0.00000445, 0.00000442, 0.00000444, 0.00000444, 0.00000443, 0.00000444, 0.00000445, 0.00000445, 0.00000447, 0.00000446, 0.00000446, 0.00000445, 0.00000446, 0.00000444, 0.00000443, 0.00000443, 0.00000441, 0.0000044, 0.00000438, 0.00000435, 0.00000438, 0.00000439, 0.00000441, 0.00000445, 0.00000442, 0.00000439, 0.0000044, 0.00000442, 0.0000044, 0.00000442, 0.00000442, 0.00000442, 0.00000442, 0.00000442, 0.00000442, 0.00000439, 0.00000439, 0.00000435, 0.00000435, 0.00000435, 0.00000439, 0.00000434, 0.00000435, 0.00000437, 0.00000431, 0.00000436, 0.00000433, 0.00000431, 0.00000438, 0.00000433, 0.00000435, 0.00000433, 0.00000438, 0.00000444, 0.00000451, 0.00000452, 0.00000449, 0.00000455, 0.00000462, 0.00000456, 0.00000463, 0.00000461, 0.0000046, 0.00000459, 0.00000454, 0.00000459, 0.00000457, 0.00000454, 0.00000452, 0.00000452, 0.00000446, 0.00000453, 0.00000448, 0.00000445, 0.00000451, 0.00000453, 0.0000045, 0.00000453, 0.00000452, 0.00000451, 0.00000452, 0.00000451, 0.00000452, 0.00000456, 0.00000459, 0.00000461, 0.00000459, 0.00000461, 0.00000462, 0.00000462, 0.00000466, 0.00000465, 0.00000473, 0.00000461, 0.00000468, 0.00000469, 0.00000474, 0.00000471, 0.00000472, 0.00000469, 0.00000468, 0.00000464, 0.00000466, 0.00000461, 0.00000457, 0.0000046, 0.00000466, 0.00000464, 0.00000465, 0.00000465, 0.00000464, 0.00000463, 0.00000462, 0.00000462, 0.00000462, 0.00000463, 0.0000046, 0.00000458, 0.00000457, 0.00000457, 0.00000456, 0.00000459, 0.00000456, 0.00000455, 0.00000452, 0.00000454, 0.00000456, 0.00000455, 0.00000456, 0.0000046, 0.00000461, 0.00000461, 0.00000461, 0.00000461, 0.0000046, 0.00000457, 0.00000459, 0.00000458, 0.00000447, 0.00000447, 0.00000439, 0.00000446, 0.00000448, 0.00000451, 0.00000448, 0.00000443, 0.00000443, 0.00000443, 0.00000445, 0.00000445, 0.00000448, 0.00000447, 0.00000451, 0.00000453, 0.00000452, 0.00000452, 0.00000451, 0.0000045, 0.00000454, 0.0000045, 0.00000454, 0.00000451, 0.00000451];
var market = bid.length
var period
var periodBack
var changeScore = []
var cumulative
var cumScore = []
var prev
var backShort = []
var backLong = []
var delay
var delays
var delayedLine
var fwdShort
var fwdLong
var action
var parameter1
var parameter2
var parameter3
var parameter4
var length
var minimumArray = [];
var maximumArray = [];
var bidChange;
var askChange;
var rand;
var result;
var tradeScore

// The Complex Line function that calculates (x+y)/2 based on duration and location
function complexLine (position, duration) { // remains unchanged
    length = position - duration; // how long you go back for
    minimumArray =[] // array of bids
    maximumArray = [] // array of asks
    for (i = position; i > length; i--) {
        minimumArray.push(bid[i]); // fill up array with bids
        maximumArray.push(ask[i]); // fill up array with asks
    }
    min = Math.min(...minimumArray); // find the minimum bid in the period
    max = Math.max(...maximumArray); // find the maximum ask in the period
    return result = (min+max)/2;
}

function calculate () { // edited function
    newPrice = price[0]
    for (period = 0; period < market; period++) { // loop through size of market
        prev = period - 1 // previous positions
        prev2 = period - 2
        change = price[period] - price[prev]
        changeRatio = (change/price[prev])*100 // new section
        if (change <= 0) {
            changeScore[period] = -1
        } else if (change > 0) {
            changeScore[period] = 1
        }
        bidChange = bid[period] - bid[prev]
        askChange = ask[period] - ask[prev]
        // each period from 3 has a cumulative score. Cumulative score is sum of change score for current position and previous 2 positions
        cumScore[period] = changeScore[period] + changeScore[prev] + changeScore[prev2] // YES, CUMSCORE IS TONGUE-IN-CHEEK!
        // Two delays (because, MAGICK!)
        delay = period - 25
        delays = period - 28
        // define derived variables
        backShort[period] = complexLine(period, 9) // the reverse short line
        backLong[period] = complexLine(period, 26) // the reverse long line
        delayedLine = price[delay] // the delayed line (price 26 places back)
        fwdShort = (backShort[delays] + backLong[delays]) / 2 // MAGICK!!!!
        fwdLong = complexLine(delays, 52) // always so hard to figure out how to explain this one so let's just say "MAGICK!!!"
        // actual math
        if (price[period] > fwdShort && price[period] > fwdLong) {parameter1 = 1;} else {parameter1 = 0;} // instead of T/F, now assigning scores to each parameter
        if (fwdShort > fwdLong) {parameter2 = 1;} else {parameter2 = 0;} 
        if (cumScore[period] > 0) {parameter3 = 1;} else {parameter3 = 0;}
        if (bidChange < 0 || askChange < 0) {parameter4 = -1} else {parameter4 = 0} // this is a parameter to limit false positives, so it's negative
        tradeScore = parameter1 + parameter2 + parameter3 + parameter4; // tradeScore has to be 2 or over to trigger a go
        if (tradeScore > 1) {action = "GO";} else {action ="STOP"}
    }
};

calculate ();
